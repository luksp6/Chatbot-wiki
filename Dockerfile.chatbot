# Establecer la imagen base
FROM redis/redis-stack-server:latest

# Establecer el directorio de trabajo en el contenedor
WORKDIR /app
ENV PYTHONPATH="/app/code"

# Instalar herramientas necesarias y Python 3.10
RUN apt update && \
    apt install -y curl git software-properties-common && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    apt update && \
    apt install -y python3.10 python3.10-venv python3.10-dev python3-pip && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Instalar Ollama
RUN curl -fsSL https://ollama.com/install.sh | sh

# Copiar solo el archivo de requerimientos antes del resto del código
COPY ./chatbot/code/requirements.txt /app/code/requirements.txt

#Actualizar pip
RUN python3.10 -m pip install --upgrade pip

# Instalar dependencias ANTES de copiar el resto de archivos
RUN python3.10 -m pip install --no-cache-dir -r /app/code/requirements.txt

# Copiar los archivos de la aplicación al contenedor
COPY ./chatbot/code /app/code

# Exponer los puertos de la aplicación y Ollama
EXPOSE ${CHATBOT_PORT} 11434 6379

# Desactivar el buffering de stdout y stderr
ENV PYTHONUNBUFFERED=1

# Cargar variables de entorno
ARG LLM_NAME
ENV LLM_NAME=${LLM_NAME}

ARG CHATBOT_PORT
ENV CHATBOT_PORT=${CHATBOT_PORT}

ARG WORKERS
ENV WORKERS=${WORKERS}

ARG REDIS_PORT
ENV REDIS_PORT=${REDIS_PORT}

# Definir el comando de inicio
CMD redis-server --port ${REDIS_PORT} --daemonize no --loadmodule /opt/redis-stack/lib/redisearch.so & \
    ollama serve & sleep 5 && ollama pull $LLM_NAME && \
    python3.10 -m gunicorn --preload -w ${WORKERS} --worker-class async -k uvicorn.workers.UvicornWorker code.main:app --bind 0.0.0.0:${CHATBOT_PORT}